package eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty;

import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.CodeMismatchException;
import eu.jpereira.trainings.designpatterns.structural.adapter.exceptions.IncorrectDoorCodeException;
import eu.jpereira.trainings.designpatterns.structural.adapter.model.Door;
import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeCodeForUnlockedDoor;
import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotChangeStateOfLockedDoor;
import eu.jpereira.trainings.designpatterns.structural.adapter.thirdparty.exceptions.CannotUnlockDoorException;

class ThirdPartyDoorObjectAdapter implements Door {
    private ThirdPartyDoor delegateDoor;

    public ThirdPartyDoorObjectAdapter() {
        this.delegateDoor = createNewThirdPartyDoor();
    }

    private ThirdPartyDoor createNewThirdPartyDoor() {
        return new ThirdPartyDoor();
    }

    @Override
    public void open(String code) throws IncorrectDoorCodeException {
        try {
            this.delegateDoor.unlock(code);
            this.delegateDoor.setState(ThirdPartyDoor.DoorState.OPEN);
        } catch(CannotUnlockDoorException ex) {
            throw new IncorrectDoorCodeException(ex);
        } catch(CannotChangeStateOfLockedDoor ex) {
            throw new IncorrectDoorCodeException(ex);
        }
    }

    @Override
    public void close() {
        try {
            delegateDoor.setState(ThirdPartyDoor.DoorState.CLOSED);
            delegateDoor.lock();
        } catch(CannotChangeStateOfLockedDoor ignored) { }
    }

    @Override
    public boolean isOpen() {
        if(delegateDoor.getState()== ThirdPartyDoor.DoorState.OPEN)
            return true;
        return false;
    }

    @Override
    public void changeCode(String oldCode, String newCode, String newCodeConfirmation) throws IncorrectDoorCodeException, CodeMismatchException {
        if(!newCode.equals(newCodeConfirmation))
            throw new CodeMismatchException();
        try {
            delegateDoor.unlock(oldCode);
            delegateDoor.setNewLockCode(newCode);
        } catch(CannotUnlockDoorException ex) {
            throw new IncorrectDoorCodeException(ex);
        } catch(CannotChangeCodeForUnlockedDoor ignored) { }
    }

    @Override
    public boolean testCode(String code) {
        try {
            delegateDoor.unlock(code);
        } catch(CannotUnlockDoorException ex) {
            return false;
        } finally {
            delegateDoor.lock();
            return true;
        }
    }
}