@startuml

class blocks.Invoice {
    ID
    client
    deliveryDate
    invoiceElements
    totalTax()
    totalValue()
}

class blocks.Client {
    name
    surname
    Address
    PESEL
    validate()
}

class blocks.InvoiceElement{
    name
    price
    VAT
    quantity
    totalTax()
    totalValue()
}

abstract handlers.InvoiceHandler{
    ArrayList invoices
    static invoiceId
    createInvoice()
    getInvoice(id)
}

abstract handlers.ClientHandler{
    createClient()
}

abstract adapters.CreationAdapter {
    tempClient
    tempInvoiceElements
    createClient()
    createItem()
    createInvoice()

}


class gui.MainFrame{
    bootShowInvoicesFrame()
    bootCreateInvoicesFrame()
}

class gui.NewInvoiceFrame {
    addItemToInvoice()
    confirmInvoice()
}

class gui.ShowInvoicesFrame {
    updateInvoices()
    openInvoice(id)
}

interface database.Loader {
    loadFromDB()
}
interface database.Saver {
    saveInDB()
}

gui.NewInvoiceFrame - adapters.CreationAdapter
gui.MainFrame -- gui.ShowInvoicesFrame
gui.MainFrame -- gui.NewInvoiceFrame
gui.ShowInvoicesFrame -- handlers.InvoiceHandler
adapters.CreationAdapter -- handlers.ClientHandler
adapters.CreationAdapter -- handlers.InvoiceHandler
blocks.Invoice *- blocks.Client
blocks.Invoice o-- blocks.InvoiceElement
handlers.InvoiceHandler -- blocks.Invoice
handlers.ClientHandler -- blocks.Client
database.Loader -- adapters.CreationAdapter
database.Saver - handlers.InvoiceHandler

@enduml